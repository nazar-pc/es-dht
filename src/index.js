// Generated by LiveScript 1.5.0
/**
 * @package Entangled state DHT
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  /*
   * Implements version ? of the specification
   */
  /**
   * @param {!Uint8Array}	array1
   * @param {!Uint8Array}	array2
   *
   * @return {boolean}
   */
  function are_arrays_equal(array1, array2){
    var i$, len$, key, item;
    if (array1 === array2) {
      return true;
    }
    if (array1.length !== array2.length) {
      return false;
    }
    for (i$ = 0, len$ = array1.length; i$ < len$; ++i$) {
      key = i$;
      item = array1[i$];
      if (item !== array2[key]) {
        return false;
      }
    }
    return true;
  }
  function Wrapper(arrayMapSet, kBucketSync, merkleTreeBinary){
    var ArrayMap;
    ArrayMap = arrayMapSet['ArrayMap'];
    /**
     * @constructor
     *
     * @param {number}	size
     *
     * @return {!LRU}
     */
    function LRU(size){
      if (!(this instanceof LRU)) {
        return new LRU(size);
      }
      this._size = size;
      this._map = ArrayMap();
      this._last_key = null;
    }
    LRU.prototype = {
      /**
       * @param {!Uint8Array}			key
       * @param {!Array<!Uint8Array>}	value
       */
      add: function(key, value){
        if (this._map.has(key)) {
          return;
        }
        this._map.set(key, value);
        this._last_key = key;
        if (this._map.size > this._size) {
          this._map['delete'](this._map.keys().next().value);
        }
      }
      /**
       * @param {!Uint8Array}	key
       *
       * @return {!Array<!Uint8Array>}
       */,
      get: function(key){
        return this._map.get(key);
      }
      /**
       * @param {!Uint8Array}	key
       */,
      del: function(key){
        var ref$;
        this._map['delete'](key);
        if (!this._map.has(this._last_key)) {
          this._last_key = (ref$ = Array.from(this._map.keys()))[ref$.length - 1] || null;
        }
      }
      /**
       * @return {Uint8Array} `null` if there are no items
       */,
      last_key: function(){
        return this._last_key;
      }
    };
    Object.defineProperty(LRU.prototype, 'constructor', {
      value: LRU
    });
    /**
     * @constructor
     *
     * @param {!Uint8Array}	id					Own ID
     * @param {!Function}	hash_function		Hash function to be used for Merkle Tree
     * @param {number}		bucket_size			Size of a bucket from Kademlia design
     * @param {number}		state_history_size	How many versions of local history will be kept
     *
     * @return {!DHT}
     */
    function DHT(id, hash_function, bucket_size, state_history_size){
      if (!(this instanceof DHT)) {
        return new DHT(id, hash_function, bucket_size, state_history_size);
      }
      this._id = id;
      this._id_length = id.length;
      this._hash = hash_function;
      this._state = LRU(state_history_size);
      this._peers = kBucketSync(this._id, bucket_size);
      this._lookups = ArrayMap();
      this._insert_state(new Map);
    }
    DHT.prototype = {
      /**
       * @param {!Uint8Array}	id		ID if the node being searched for
       * @param {number=}		number	Number of nodes to be returned if exact match was not found, defaults to bucket size
       *
       * @return {!<Array<!Array<!Uint8Array>>>}
       */
      'start_lookup': function(id, number){
        var bucket, known_nodes, closest_so_far, nodes_to_connect_to, i$, len$, node_id, parent_peer_id, parent_peer_state_version;
        number == null && (number = this._bucket_size);
        bucket = kBucketSync(id, number);
        known_nodes = ArrayMap();
        this._get_state().forEach(function(arg$, peer_id){
          var state_version, peer_peers;
          state_version = arg$[0], peer_peers = arg$[1];
          bucket.set(peer_id);
          known_nodes.set(peer_id, ArraySet([peer_id, state_version]));
          peer_peers.forEach(function(peer_peer_id){
            var parents;
            bucket.set(peer_peer_id);
            parents = known_nodes.get(peer_peer_id) || ArraySet();
            parents.add(peer_id);
            known_nodes.set(peer_peer_id, parents);
          });
        });
        closest_so_far = bucket['closest'](id, number);
        nodes_to_connect_to = [];
        for (i$ = 0, len$ = closest_so_far.length; i$ < len$; ++i$) {
          node_id = closest_so_far[i$];
          if (!this._peers.has(node_id)) {
            parent_peer_id = known_nodes.get(node_id)[0];
            parent_peer_state_version = known_nodes.get(peer_peer_id)[1];
            nodes_to_connect_to.push([node_id, parent_peer_id, parent_peer_state_version]);
          }
        }
        this._lookups.set(id, {
          known_nodes: known_nodes,
          bucket: bucket
        });
        return nodes_to_connect_to;
      }
      /**
       * @param {!Uint8Array} id Same as in `start_lookup()`
       */,
      'update_lookup': function(id){}
      /**
       * @param {!Uint8Array} id Same as in `start_lookup()`
       */,
      'is_lookup_finished': function(id){}
      /**
       * @param {!Uint8Array} id Same as in `start_lookup()`
       */,
      'get_lookup_result': function(id){}
      /**
       * @param {!Uint8Array}			peer_id				Id of a peer
       * @param {!Uint8Array}			peer_state_version	State version of a peer
       * @param {!Uint8Array}			proof				Proof for specified state
       * @param {!Array<!Uint8Array>}	peer_peers			Peer's peers that correspond to `state_version`
       *
       * @return {boolean} `false` if proof is not valid or if a bucket that corresponds to this peer is already full
       */,
      'set_peer': function(peer_id, peer_state_version, proof, peer_peers){
        var detected_peer_id, state;
        detected_peer_id = this._check_state_proof(peer_state_version, proof, peer_id);
        if (!detected_peer_id || !are_arrays_equal(detected_peer_id, peer_id)) {
          return false;
        }
        if (!this._peers.set(peer_id)) {
          return false;
        }
        state = this._get_state_copy();
        state.set(peer_id, [peer_state_version, ArraySet(peer_peers)]);
        this._insert_state(state);
        true;
      }
      /**
       * @param {!Uint8Array} peer_id Id of a peer
       */,
      'del_peer': function(peer_id){
        var state;
        state = this._get_state_copy();
        if (!state.has(peer_id)) {
          return;
        }
        this._peers['delete'](peer_id);
        state['delete'](peer_id);
        this._insert_state(state);
      }
      /**
       * @param {Uint8Array=} state_version	Specific state version or latest if `null`
       *
       * @return {Array} `[state_version, proof, peer_peers]` or `null` if state version not found, where `state_version` is a Merkle Tree root, `proof` is a proof
       *                 that own ID corresponds to `state_version` and `peer_peers` is an array of peer's peers IDs
       */,
      'get_state': function(state_version){
        var state, proof;
        state_version == null && (state_version = null);
        state = this._get_state(state_version);
        if (!state) {
          null;
        }
        proof = this['get_state_proof'](state_version, this._id);
        return [state_version, proof, Array.from(state.keys())];
      }
      /**
       * @param {Uint8Array=}	state_version	Specific state version or latest if `null`
       *
       * @return {Map} `null` if state is not found
       */,
      _get_state: function(state_version){
        state_version == null && (state_version = null);
        state_version = state_version || this._state.last_key();
        return this._state.get(state_version) || null;
      }
      /**
       * @param {Uint8Array=}	state_version	Specific state version or latest if `null`
       *
       * @return {Map}
       */,
      _get_state_copy: function(state_version){
        var state;
        state_version == null && (state_version = null);
        state = this._get_state(state_version);
        if (!state) {
          null;
        }
        return ArrayMap(Array.from(state));
      }
      /**
       * Generate proof about peer in current state version
       *
       * @param {!Uint8Array} state_version	Specific state version
       * @param {!Uint8Array} peer_id			ID of peer for which to create a proof
       *
       * @return {!Uint8Array}
       */,
      'get_state_proof': function(state_version, peer_id){
        var state, items, proof;
        state = this._get_state(state_version);
        if (!state || !state.has(peer_id)) {
          return new Uint8Array(0);
        } else {
          items = this._reduce_state_to_proof_items(state);
          return proof = merkleTreeBinary['get_proof'](items, peer_id, this._hash);
        }
      }
      /**
       * @param {!Map} state
       *
       * @return {!Array<!Uint8Array>}
       */,
      _reduce_state_to_proof_items: function(state){
        var items;
        items = [];
        state.forEach(function(arg$, peer_id){
          var peer_state_version;
          peer_state_version = arg$[0];
          items.push(peer_id, state_version);
        });
        items.push(this._id, this._id);
        items;
      }
      /**
       * Generate proof about peer in current state version
       *
       * @param {!Uint8Array} state_version	Local state version
       * @param {!Uint8Array} peer_id			ID of peer that created proof
       * @param {!Uint8Array} proof			Proof itself
       * @param {!Uint8Array} target_peer_id	ID of peer's peer for which proof was generated
       *
       * @return {Uint8Array} `state_version` of `target_peer_id` on success or `null` otherwise
       */,
      'check_state_proof': function(state_version, peer_id, proof, target_peer_id){
        var state, peer_state_version;
        state = this._get_state(state_version);
        if (!state) {
          return null;
        }
        peer_state_version = state.get(peer_id)[0];
        return this._check_state_proof(peer_state_version, proof, target_peer_id);
      }
      /**
       * @param {!Uint8Array} state_version
       * @param {!Uint8Array} proof
       * @param {!Uint8Array} target_peer_id
       *
       * @return {Uint8Array} `state_version` of `target_peer_id` on success or `null` otherwise
       */,
      _check_state_proof: function(state_version, proof, target_peer_id){
        if (proof[0] === 0 && merkleTreeBinary['check_proof'](state_version, proof, target_peer_id, this._hash)) {
          return proof.subarray(1, this._id_length + 1);
        } else {
          return null;
        }
      }
      /**
       * @param {!Map} new_state
       */,
      _insert_state: function(new_state){
        var items, state_version;
        items = this._reduce_state_to_proof_items(new_state);
        state_version = merkleTreeBinary['get_root'](items, this._hash);
        this._state.add(state_version, new_state);
      }
    };
    Object.defineProperty(DHT.prototype, 'constructor', {
      value: DHT
    });
    return DHT;
  }
  if (typeof define === 'function' && define['amd']) {
    define(['array-map-set', 'k-bucket-sync', 'merkle-tree-binary'], Wrapper);
  } else if (typeof exports === 'object') {
    module.exports = Wrapper(require('array-map-set'), require('k-bucket-sync'), require('merkle-tree-binary'));
  } else {
    this['detox_transport'] = Wrapper(this['array_map_set'], this['k_bucket_sync'], this['merkle_tree_binary']);
  }
}).call(this);
