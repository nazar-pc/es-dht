// Generated by LiveScript 1.5.0
/**
 * @package Entangled state DHT
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  /*
   * Implements version ? of the specification
   */
  /**
   * @constructor
   *
   * @param {number}	size
   * @param {!Map=}	ArrayMap
   *
   * @return {!LRU}
   */
  function LRU(size, ArrayMap){
    ArrayMap == null && (ArrayMap = new Map);
    if (!(this instanceof LRU)) {
      return new LRU(size);
    }
    this._size = size;
    this._map = new ArrayMap;
    this._last_key = null;
  }
  LRU.prototype = {
    /**
     * @param {!Uint8Array}			key
     * @param {!Array<!Uint8Array>}	value
     */
    add: function(key, value){
      this._map.set(key, value);
      this._last_key = key;
      if (this._map.size > this._size) {
        this._map['delete'](this._map.keys().next().value);
      }
    }
    /**
     * @param {Uint8Array=}	key `null` for last key
     *
     * @return {!Array<!Uint8Array>}
     */,
    get: function(key){
      key == null && (key = null);
      return this._map.get(key || this._last_key);
    }
    /**
     * @return {Uint8Array}
     */,
    last_key: function(){
      return this._last_key;
    }
  };
  function Wrapper(arrayMapSet){
    var ArrayMap;
    ArrayMap = arrayMapSet['ArrayMap'];
    /**
     * @constructor
     *
     * @param {number}	bucket_size			Size of a bucket from Kademlia design
     * @param {number}	state_history_size	How many versions of local history will be kept
     *
     * @return {!DHT}
     */
    function DHT(bucket_size, state_history_size){
      if (!(this instanceof DHT)) {
        return new DHT(bucket_size, state_history_size);
      }
      this._state = LRU(state_history_size, ArrayMap);
    }
    DHT.prototype = {
      /**
       * @param {Uint8Array=} version	Specific state version or latest if `null`
       */
      'get_state': function(version){
        version == null && (version = null);
        return this._state.get(version);
      }
    };
    Object.defineProperty(DHT.prototype, 'constructor', {
      value: DHT
    });
    return DHT;
  }
  if (typeof define === 'function' && define['amd']) {
    define(['array-map-set'], Wrapper);
  } else if (typeof exports === 'object') {
    module.exports = Wrapper(require('array-map-set'));
  } else {
    this['detox_transport'] = Wrapper(this['array_map_set']);
  }
}).call(this);
